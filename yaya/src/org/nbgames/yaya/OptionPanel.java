/* 
 * Copyright 2015 Patrik Karlsson.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.nbgames.yaya;

import java.awt.Color;
import se.trixon.almond.GraphicsHelper;
import se.trixon.almond.dialogs.ColorChooserDialog;
import se.trixon.almond.swing.ColorChooserButton;

/**
 *
 * @author Patrik Karlsson <patrik@trixon.se>
 */
final class OptionPanel extends javax.swing.JPanel {

    private final OptionPanelController mController;
    private final Options mOptions = Options.INSTANCE;

    OptionPanel(OptionPanelController controller) {
        mController = controller;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorPanel = new javax.swing.JPanel();
        backgroundColorChooserButton = new se.trixon.almond.swing.ColorChooserButton();
        scorecardColorChooserButton = new se.trixon.almond.swing.ColorChooserButton();
        headerColorChooserButton = new se.trixon.almond.swing.ColorChooserButton();
        sumColorChooserButton = new se.trixon.almond.swing.ColorChooserButton();
        rowColorChooserButton = new se.trixon.almond.swing.ColorChooserButton();
        indicatorHighColorChooserButton = new se.trixon.almond.swing.ColorChooserButton();
        indicatorLowColorChooserButton = new se.trixon.almond.swing.ColorChooserButton();
        defaultColorsButton = new javax.swing.JButton();
        useSymbolsCheckBox = new javax.swing.JCheckBox();

        colorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(OptionPanel.class, "OptionPanel.colorPanel.border.title"))); // NOI18N
        colorPanel.setLayout(new java.awt.GridLayout(2, 4));

        org.openide.awt.Mnemonics.setLocalizedText(backgroundColorChooserButton, org.openide.util.NbBundle.getMessage(OptionPanel.class, "OptionPanel.backgroundColorChooserButton.text")); // NOI18N
        backgroundColorChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserButtonActionPerformed(evt);
            }
        });
        colorPanel.add(backgroundColorChooserButton);

        org.openide.awt.Mnemonics.setLocalizedText(scorecardColorChooserButton, org.openide.util.NbBundle.getMessage(OptionPanel.class, "OptionPanel.scorecardColorChooserButton.text")); // NOI18N
        scorecardColorChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserButtonActionPerformed(evt);
            }
        });
        colorPanel.add(scorecardColorChooserButton);

        org.openide.awt.Mnemonics.setLocalizedText(headerColorChooserButton, org.openide.util.NbBundle.getMessage(OptionPanel.class, "OptionPanel.headerColorChooserButton.text")); // NOI18N
        headerColorChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserButtonActionPerformed(evt);
            }
        });
        colorPanel.add(headerColorChooserButton);

        org.openide.awt.Mnemonics.setLocalizedText(sumColorChooserButton, org.openide.util.NbBundle.getMessage(OptionPanel.class, "OptionPanel.sumColorChooserButton.text")); // NOI18N
        sumColorChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserButtonActionPerformed(evt);
            }
        });
        colorPanel.add(sumColorChooserButton);

        org.openide.awt.Mnemonics.setLocalizedText(rowColorChooserButton, org.openide.util.NbBundle.getMessage(OptionPanel.class, "OptionPanel.rowColorChooserButton.text")); // NOI18N
        rowColorChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserButtonActionPerformed(evt);
            }
        });
        colorPanel.add(rowColorChooserButton);

        org.openide.awt.Mnemonics.setLocalizedText(indicatorHighColorChooserButton, org.openide.util.NbBundle.getMessage(OptionPanel.class, "OptionPanel.indicatorHighColorChooserButton.text")); // NOI18N
        indicatorHighColorChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserButtonActionPerformed(evt);
            }
        });
        colorPanel.add(indicatorHighColorChooserButton);

        org.openide.awt.Mnemonics.setLocalizedText(indicatorLowColorChooserButton, org.openide.util.NbBundle.getMessage(OptionPanel.class, "OptionPanel.indicatorLowColorChooserButton.text")); // NOI18N
        indicatorLowColorChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserButtonActionPerformed(evt);
            }
        });
        colorPanel.add(indicatorLowColorChooserButton);

        org.openide.awt.Mnemonics.setLocalizedText(defaultColorsButton, org.openide.util.NbBundle.getMessage(OptionPanel.class, "OptionPanel.defaultColorsButton.text")); // NOI18N
        defaultColorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultColorsButtonActionPerformed(evt);
            }
        });
        colorPanel.add(defaultColorsButton);

        org.openide.awt.Mnemonics.setLocalizedText(useSymbolsCheckBox, org.openide.util.NbBundle.getMessage(OptionPanel.class, "OptionPanel.useSymbolsCheckBox.text")); // NOI18N
        useSymbolsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useSymbolsCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(colorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(useSymbolsCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useSymbolsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void colorChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorChooserButtonActionPerformed
        ColorChooserButton button = (ColorChooserButton) evt.getSource();
        button.setColor(ColorChooserDialog.showDialog(button.getColor()));
        updateDefaultButton();
        mController.changed();
    }//GEN-LAST:event_colorChooserButtonActionPerformed

    private void defaultColorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultColorsButtonActionPerformed
        backgroundColorChooserButton.setColor(Options.ColorItem.BACKGROUND.getDefaultColor());
        scorecardColorChooserButton.setColor(Options.ColorItem.SCORECARD.getDefaultColor());
        headerColorChooserButton.setColor(Options.ColorItem.HEADER.getDefaultColor());
        sumColorChooserButton.setColor(Options.ColorItem.SUM.getDefaultColor());
        rowColorChooserButton.setColor(Options.ColorItem.ROW.getDefaultColor());
        indicatorHighColorChooserButton.setColor(Options.ColorItem.INDICATOR_HI.getDefaultColor());
        indicatorLowColorChooserButton.setColor(Options.ColorItem.INDICATOR_LO.getDefaultColor());

        mController.changed();
        updateDefaultButton();
    }//GEN-LAST:event_defaultColorsButtonActionPerformed

    private void useSymbolsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useSymbolsCheckBoxActionPerformed
        mController.changed();
    }//GEN-LAST:event_useSymbolsCheckBoxActionPerformed

    private void updateDefaultButton() {
        boolean hasChanged = colorHasChanged(backgroundColorChooserButton, Options.ColorItem.BACKGROUND)
                || colorHasChanged(scorecardColorChooserButton, Options.ColorItem.SCORECARD)
                || colorHasChanged(headerColorChooserButton, Options.ColorItem.HEADER)
                || colorHasChanged(sumColorChooserButton, Options.ColorItem.SUM)
                || colorHasChanged(rowColorChooserButton, Options.ColorItem.ROW)
                || colorHasChanged(indicatorHighColorChooserButton, Options.ColorItem.INDICATOR_HI)
                || colorHasChanged(indicatorLowColorChooserButton, Options.ColorItem.INDICATOR_LO);

        defaultColorsButton.setEnabled(hasChanged);
    }

    private boolean colorHasChanged(ColorChooserButton colorChooserButton, Options.ColorItem colorItem) {
        Color currentColor = colorChooserButton.getColor();
        Color defaultColor = colorItem.getDefaultColor();

        return GraphicsHelper.colorToHexInt(currentColor) != GraphicsHelper.colorToHexInt(defaultColor);
    }

    void load() {
        useSymbolsCheckBox.setSelected(mOptions.isUsingSymbols());
        backgroundColorChooserButton.setColor(mOptions.getColor(Options.ColorItem.BACKGROUND));
        scorecardColorChooserButton.setColor(mOptions.getColor(Options.ColorItem.SCORECARD));
        headerColorChooserButton.setColor(mOptions.getColor(Options.ColorItem.HEADER));
        sumColorChooserButton.setColor(mOptions.getColor(Options.ColorItem.SUM));
        rowColorChooserButton.setColor(mOptions.getColor(Options.ColorItem.ROW));
        indicatorHighColorChooserButton.setColor(mOptions.getColor(Options.ColorItem.INDICATOR_HI));
        indicatorLowColorChooserButton.setColor(mOptions.getColor(Options.ColorItem.INDICATOR_LO));

        updateDefaultButton();
    }

    void store() {
        mOptions.setUseSymbols(useSymbolsCheckBox.isSelected());
        mOptions.setColor(Options.ColorItem.BACKGROUND, backgroundColorChooserButton.getColor());
        mOptions.setColor(Options.ColorItem.SCORECARD, scorecardColorChooserButton.getColor());
        mOptions.setColor(Options.ColorItem.HEADER, headerColorChooserButton.getColor());
        mOptions.setColor(Options.ColorItem.SUM, sumColorChooserButton.getColor());
        mOptions.setColor(Options.ColorItem.ROW, rowColorChooserButton.getColor());
        mOptions.setColor(Options.ColorItem.INDICATOR_HI, indicatorHighColorChooserButton.getColor());
        mOptions.setColor(Options.ColorItem.INDICATOR_LO, indicatorLowColorChooserButton.getColor());
    }

    boolean valid() {
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private se.trixon.almond.swing.ColorChooserButton backgroundColorChooserButton;
    private javax.swing.JPanel colorPanel;
    private javax.swing.JButton defaultColorsButton;
    private se.trixon.almond.swing.ColorChooserButton headerColorChooserButton;
    private se.trixon.almond.swing.ColorChooserButton indicatorHighColorChooserButton;
    private se.trixon.almond.swing.ColorChooserButton indicatorLowColorChooserButton;
    private se.trixon.almond.swing.ColorChooserButton rowColorChooserButton;
    private se.trixon.almond.swing.ColorChooserButton scorecardColorChooserButton;
    private se.trixon.almond.swing.ColorChooserButton sumColorChooserButton;
    private javax.swing.JCheckBox useSymbolsCheckBox;
    // End of variables declaration//GEN-END:variables
}
